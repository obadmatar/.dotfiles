#!/bin/sh

## autoload vcs and colors
autoload -Uz vcs_info
autoload -U colors && colors

# # enable only git 
# zstyle ':vcs_info:*' enable git 

# # setup a hook that runs before every ptompt. 
# precmd_vcs_info() { vcs_info }
# precmd_functions+=( precmd_vcs_info )
# setopt prompt_subst

# # add a function to check for untracked files in the directory.
# # from https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
# zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
# # 
# +vi-git-untracked(){
#     if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
#         git status --porcelain | grep '??' &> /dev/null ; then
#         # This will show the marker if there are any untracked files in repo.
#         # If instead you want to show the marker only if there are untracked
#         # files in $PWD, use:
#         #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
#         hook_com[staged]+='*' # signify new files with a bang
#     fi
# }

# zstyle ':vcs_info:*' check-for-changes true
# # zstyle ':vcs_info:git:*' formats " %r/%S %b %m%u%c "
# zstyle ':vcs_info:git:*' formats " %{$fg[blue]%}(%{$fg[red]%}%m%u%c%{$fg[yellow]%}%{$fg[magenta]%} %b%{$fg[blue]%})"

# format our main prompt for hostname current folder, and permissions.
# PROMPT="%B%{$fg[blue]%}[%{$fg[white]%}%n%{$fg[red]%}@%{$fg[white]%}%m%{$fg[blue]%}] %(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )%{$fg[cyan]%}%c%{$reset_color%} "
# PROMPT+="\$vcs_info_msg_0_ "
# TODO look into this for more colors
# https://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
# also ascii escape codes


# ---------------------------------------------------
# ---------------------------------------------------
# ---------------------------------------------------
# ---------------------------------------------------


# Find and set branch name var if in git repository.
# function git_branch_name()
# {
#   branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
#   if [[ $branch == "" ]];
#   then
#     :
#   else
#     echo '- ('$branch')'
#   fi
# }

# # Enable substitution in the prompt.
# setopt prompt_subst

# # Config for prompt. PS1 synonym.
# prompt='%3/ $(git_branch_name) > '

# ---------------------------------------------------
# ---------------------------------------------------
# ---------------------------------------------------
# ---------------------------------------------------

### Run vcs_info selectively to increase speed in large repos ################

# The following example shows a possible setup for vcs_info which displays
# staged and unstaged changes in the vcs_info prompt and prevents running
# it too often for speed reasons.


# Allow substitutions and expansions in the prompt, necessary for
# using a single-quoted $vcs_info_msg_0_ in PS1, RPOMPT (as used here) and
# similar. Other ways of using the information are described above.
setopt promptsubst
# Load vcs_info to display information about version control repositories.
autoload -Uz vcs_info

autoload -U add-zsh-hook

# Check the repository for changes so they can be used in %u/%c (see
# below). This comes with a speed penalty for bigger repositories.
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true


# Default to running vcs_info. If possible we prevent running it later for
# speed reasons. If set to a non empty value vcs_info is run.
FORCE_RUN_VCS_INFO=1

# Only run vcs_info when necessary to speed up the prompt and make using
# check-for-changes bearable in bigger repositories. This setup was
# inspired by Bart Trojanowski
# (http://jukie.net/~bart/blog/pimping-out-zsh-prompt).
#
# This setup is by no means perfect. It can only detect changes done
# through the VCS's commands run by the current shell. If you use your
# editor to commit changes to the VCS or if you run them in another shell
# this setup won't detect them. To fix this just run "cd ." which causes
# vcs_info to run and update the information. If you use aliases to run
# the VCS commands update the case check below.
zstyle ':vcs_info:*+pre-get-data:*' hooks pre-get-data

+vi-pre-get-data() {
    # Only Git and Mercurial support and need caching. Abort if any other
    # VCS is used.
    [[ "$vcs" != git && "$vcs" != hg ]] && return

    # If the shell just started up or we changed directories (or for other
    # custom reasons) we must run vcs_info.
    if [[ -n $FORCE_RUN_VCS_INFO ]]; then
        FORCE_RUN_VCS_INFO=
        return
    fi

    # If we got to this point, running vcs_info was not forced, so now we
    # default to not running it and selectively choose when we want to run
    # it (ret=1 means run it, ret=0 means don't).
    ret=1
    # If a git/hg command was run then run vcs_info as the status might
    # need to be updated.
    case "$(fc -ln $(($HISTCMD-1)))" in
        git*)
            ret=0
            ;;
        hg*)
            ret=0
            ;;
    esac
}


# Characters
GEAR="\u2699"
CROSS="\u2718"
BRANCH="\ue0a0"
DETACHED="\u27a6"
PLUSMINUS="\u00b1"
LIGHTNING="\u26a1"
SEGMENT_SEPARATOR="\ue0b0"

print_branch_icon() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        echo \ $BRANCH\ 
    else
        ;
    fi
}

# Call vcs_info as precmd before every prompt.
prompt_precmd() {
    vcs_info
    # Display the VCS information
    setopt prompt_subst
    # %{$fg_bold[white]%}@%m%{$reset_color%}
    PROMPT="%{$fg_bold[green]%}%3~%{$reset_color%}%{$fg[red]%}$(print_branch_icon)\$vcs_info_msg_0_%{$reset_color%} %# "
}
add-zsh-hook precmd prompt_precmd

# Must run vcs_info when changing directories.
prompt_chpwd() {
    FORCE_RUN_VCS_INFO=1
}

# Zsh has two built-in ways to show the current directory:
# %d shows the entire path.
# %~ shows the path with any variables replaced.
# Unfortunately neither of these work for me.
# If I'm in a directory that's under my home directory I want to see ~ instead of the full path. This would seem to mean that I should use %~, but there's a catch.
# The %~ sequence also replaces any directories that happen to be environment variables. 
# That means if I'm in something under my virtualenvs directory I'll see ~WORKON_HOME/venv_name which is extremely ugly.
# To get around this I defined a simple function that implements the behavior I want.
function collapse_pwd {
    echo $(pwd | sed -e "s,^$HOME,~,")
}

function prompt_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    hg root >/dev/null 2>/dev/null && echo '☿' && return
    echo '○'
}

add-zsh-hook chpwd prompt_chpwd

zstyle ':vcs_info:*' stagedstr '±'
zstyle ':vcs_info:*' unstagedstr ''

zstyle ':vcs_info:*' check-for-changes true

# %b branch, %u unstaged changes, %c staged changes
zstyle ':vcs_info:git:*' formats       '%b%c'
zstyle ':vcs_info:git:*' actionformats '(%b|%a%u%c)'

#zstyle ':vcs_info:*' formats       '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
#zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
